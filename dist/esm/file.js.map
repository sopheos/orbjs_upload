{"version":3,"file":"file.js","names":["axios","Subject","filter","FileUpload","options","_classCallCheck","_defineProperty","_options$maxSize","maxSize","_options$name","name","_objectSpread","_createClass","key","value","getFileSize","fileSize","getTimeUpload","timeUpload","onProgress","progress","asObservable","pipe","onError","error","onComplete","complete","onSuccess","success","upload","file","data","arguments","length","undefined","reset","isFileValid","buildFormData","reupload","execRequest","lastFormData","_this","started","setTimeout","next","cancelRequest","size","formData","FormData","append","forEach","item","Blob","fileName","isFileTypeValid","_this2","allowedTypes","some","allowedType","type","isFileSizeValid","_this3","_execRequest","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this4","CancelToken","headers","axiosConfig","start","wrap","_context","prev","sent","method","url","withCredentials","Expires","concat","Date","toUTCString","Pragma","cancelToken","canceler","onUploadProgress","loaded","_progress$total","total","initialProgress","now","request","then","catch","isCancel","stop","_x","apply"],"sources":["../../src/file.ts"],"sourcesContent":["import axios, { Canceler, AxiosRequestConfig } from 'axios';\nimport { Subject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface metadata { \n  name: string, \n  value: string | Blob, \n  fileName?: string \n}\n\n/**\n * FileUpload Options\n */\nexport interface FileUploadOptions {\n  /**\n   * Allowed types to upload. Format types MIME. If not set, all type allowed.\n   */\n  allowedTypes?: Array<string>;\n\n  /**\n   * Callback to build headers to send with the request\n   */\n  headers?: Function;\n\n  /**\n   * Max File Size\n   * @default 20971520\n   */\n  maxSize?: number;\n\n  /**\n   * File name\n   * @default 'file'\n   */\n  name?: string;\n\n  /**\n   * Destination url\n   */\n  url: string;\n}\n\n/**\n * Class upload file, to send a file to a server with an axios request\n * Documentation : Le live\n */\nexport class FileUpload {\n  protected fileSize: number | null = null;\n  protected timeUpload: number | null = null;\n  protected progress = new Subject<number>();\n  protected complete = new Subject<boolean>();\n  protected success = new Subject<any>();\n  protected error = new Subject<any>();\n  protected options: FileUploadOptions;\n  protected cancelRequest!: Canceler;\n  protected started: boolean = false;\n  protected initialProgress: number = 0;\n  protected lastFormData!: FormData;\n\n  /**\n   * @param {FileUploadOptions} options\n   */\n  constructor(options: FileUploadOptions) {\n    const {\n      maxSize = 20971520,\n      name = 'file',\n    } = options;\n\n    this.options = { maxSize, name, ...options };\n  }\n\n  /**\n   * @returns {number | null}\n   */\n  public getFileSize(): number | null {\n    return this.fileSize;\n  }\n  /**\n   * @returns {number | null}\n   */\n  public getTimeUpload(): number | null {\n    return this.timeUpload;\n  }\n  /**\n   * Observable request progress\n   * @returns {Observable<number>}\n   */\n  public onProgress(): Observable<number> {\n    return this.progress.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Observable error\n   * @returns {Observable<any>}\n   */\n  public onError(): Observable<any> {\n    return this.error.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Request completed\n   * @returns {Observable<boolean>}\n   */\n  public onComplete(): Observable<boolean> {\n    return this.complete.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Request Succeeded\n   * @returns {Observable<any>}\n   */\n  public onSuccess(): Observable<any> {\n    return this.success.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Check if file is valid & call buildFormData()\n   * @param {File} file\n   * @param {Array<{Â name: string, value: string | Blob, fileName?: string }>} data default empty array\n   */\n  public upload(file: File, data: Array<{ name: string, value: string | Blob, fileName?: string }> = []): void {\n    this.reset();\n\n    if (!this.isFileValid(file)) {\n      return;\n    }\n\n    this.buildFormData(file, data);\n  }\n\n  /**\n   * Retry to upload last FormData\n   */\n  public reupload(): void {\n    this.execRequest(this.lastFormData);\n  }\n\n  /**\n   * Reset FileUpload\n   */\n  protected reset(): void {\n    this.started = false;\n    setTimeout(() => this.progress.next(0));\n\n    // Cancel request si cancelable\n    if (this.cancelRequest) {\n      this.cancelRequest();\n    }\n  }\n\n  /**\n   * Build FormData & call execRequest()\n   * @param {File} file\n   * @param {metadata} data default empty array\n   */\n  protected buildFormData(file: File, data: Array<metadata> = []): void {\n    this.fileSize = file.size;\n    const formData = new FormData();\n    formData.append(this.options.name!, file, file.name);\n    if (data) {\n      data.forEach((item) => {\n        if (item.value instanceof Blob) {\n          formData.append(item.name, item.value, item.fileName);\n        } else {\n          formData.append(item.name, item.value);\n        }\n      })\n    }\n    this.execRequest(formData);\n  }\n\n  /**\n   * Determines if file type is valid\n   * @param {File} file\n   * @returns {boolean} true if file type valid, false otherwise\n   */\n  protected isFileTypeValid(file: File): boolean {\n    if (\n      this.options.allowedTypes!.length > 0\n      && !this.options.allowedTypes!.some(allowedType => allowedType === file.type)\n    ) {\n      setTimeout(() => this.error.next('invalid_filetype'));\n      setTimeout(() => this.complete.next(true));\n      this.reset();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if file size is valid\n   * @param {File} file\n   * @returns {boolean} true if file size valid, false otherwise\n   */\n  protected isFileSizeValid(file: File): boolean {\n    if (this.options.maxSize! && file.size > this.options.maxSize!) {\n      setTimeout(() => this.error.next('invalid_filesize'));\n      setTimeout(() => this.complete.next(true));\n      this.reset();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if file is valid\n   * @param {File} file\n   * @returns {boolean} true if file is valid, false otherwise\n   */\n  protected isFileValid(file: File): boolean {\n    return this.isFileTypeValid(file) && this.isFileSizeValid(file);\n  }\n\n  /**\n   * Prepare & send request to provided url\n   * @param {FormData} formData\n   */\n  private async execRequest(formData: FormData): Promise<void> {\n    this.lastFormData = formData;\n    this.started = true;\n    const { CancelToken } = axios;\n\n    let headers = {};\n    if (this.options.headers) {\n      headers = await this.options.headers()\n    }\n\n    const axiosConfig: AxiosRequestConfig = {\n      method: 'POST',\n      url: this.options.url,\n      data: formData,\n      withCredentials: true,\n      headers: {\n        ...headers,\n        Expires: 'Mon, 26 Jul 1990 05:00:00 GMT',\n        'Last-Modified': `${new Date().toUTCString()} GMT`,\n        'Cache-Control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',\n        Pragma: 'no-cache'\n      },\n      cancelToken: new CancelToken(canceler => {\n        this.cancelRequest = canceler;\n      }),\n      onUploadProgress: progress => {\n        const { loaded, total = 1 } = progress;\n        return setTimeout(() => this.progress.next(this.initialProgress + (loaded / total ) * (100 - this.initialProgress)));\n      }\n        \n    };\n\n    const start = Date.now();\n    // Send upload request\n    axios.request(axiosConfig).then((success) => {\n      this.timeUpload = Date.now() - start;\n      setTimeout(() => this.success.next(success.data));\n\n      this.started = false;\n      setTimeout(() => this.complete.next(true));\n    }).catch((error) => {\n      this.reset();\n      if (!axios.isCancel(error))\n        setTimeout(() => this.error.next(error));\n\n      this.started = false;\n      setTimeout(() => this.complete.next(true));\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}